---

- name: Add kubernetes APT GNG key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Add Kubernetes APT repository
  apt_repository:
    repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
    state: present

- name: install kubelet
  apt:
    name: kubelet=1.25.0-00
    state: present
    update_cache: true  

- name: install kubeadm
  apt:
    name: kubeadm=1.25.0-00
    state: present
    update_cache: true  


- name: install kubectl
  apt:
    name: kubectl=1.25.0-00
    state: present
    update_cache: true
    dpkg_options: force-downgrade  

- name: install kubernetes-cni
  apt:
    name: kubernetes-cni
    state: present
    update_cache: true


- name: Disable system swap
  shell: "swapoff -a"

- name: Remove current swaps from fstab
  lineinfile:
    dest: /etc/fstab
    regexp: '(?i)^([^#][\S]+\s+(none|swap)\s+swap.*)'
    line: '# \1'
    backrefs: yes
    state: present

- name: Enable kernel modules
  command: "sudo modprobe overlay && sudo modprobe br_netfilter"    

- name: Disable swappiness and pass bridged IPv4 traffic to iptable's chains
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - { name: 'vm.swappiness', value: '0' }
    - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
    - { name: 'net.bridge.bridge-nf-call-ip6tables', value: "1"}
    - { name: 'net.ipv4.ip_forward', value: '1'}

- name: Reload sysctl modules
  command: "sudo sysctl --system"   

- name: Create kubelet service drop-in directory
  file:
    path: /etc/systemd/system/kubelet.service.d/
    state: directory
    owner: "{{ ansible_user | default(ansible_user_id) }}"
    group: "{{ ansible_user | default(ansible_user_id) }}"
    mode:  0755
  register: kubelet_service_dir  

#- name: Drop kubelet conf in drop-in directory
#  when: kubelet_service_dir| success
#  template: 
#    src: "../templates/20-kubeadm.conf.j2"
#    dest: "/etc/systemd/system/kubelet.service.d/20-extra-args.conf"
#  register: kubelet_conf

- name: Copy kubeadm config to tmp directory
  template: 
    src: "../templates/kubeadm.yml.j2"
    dest: "/tmp/kubeadm.yaml"
  register: kubeadm_config_copied

# - name: Download aws-iam-authenticator
#   command: "curl -o /tmp/aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/aws-iam-authenticator"
#   register: aws_iam_authenticator_downloaded


# - name: Change permissions on aws-iam-authenticator binary
#   when: aws_iam_authenticator_downloaded| success
#   command: "chmod +x /tmp/aws-iam-authenticator"
#   register: aws_iam_authenticator_permissions


# - name: init aws-iam-authenticator
#   when: aws_iam_authenticator_permissions| success
#   command: "/tmp/aws-iam-authenticator init --cluster-id={{ cluster_name }}"
#   register: aws_iam_authenticator_init_completed


# - name: copy cert perm and kubeconfig.yaml files to valid locations
#   when: aws_iam_authenticator_init_completed| success
#   command: "mkdir -p /var/aws-iam-authenticator/ && mkdir -p /etc/kubernetes/aws-iam-authenticator/"
#   register: copied_aws_auth_files

# - name: Change permissions on cert directories
#   when: copied_aws_auth_files| success
#   copy: src={{ item.src }} dest={{ item.dest }}
#   with_items:
#      - { src: '/var/ansible/ansible/cert.pem', dest: '/var/aws-iam-authenticator/cert.pem' }
#      - { src: '/var/ansible/ansible/key.pem', dest: '/var/aws-iam-authenticator/key.pem' }
#      - { src: '/var/ansible/ansible/aws-iam-authenticator.kubeconfig', dest: '/etc/kubernetes/aws-iam-authenticator/kubeconfig.yaml' }

- name: reset kubernetes component
  when: kubeadm_config_copied| success
  shell: "kubeadm reset --force --cri-socket=/run/cri-dockerd.sock"
  register: reset_cluster

- name: set kubehome env
  command: echo "KUBECONFIG=/etc/kubernetes/admin.conf">>/etc/environment

- name: Initial kubedam using config
  when: reset_cluster| success
  shell: "kubeadm init --config /tmp/kubeadm.yaml"
  register: kubeadm_init

- name: Reload kubelet daemon
  command: systemctl daemon-reload

- name: Create Kubernetes config directory
  file:
    path: ".kube/"
    state: directory
    
- name: Copy networking config
  template:
    src: "../templates/calico.yml.j2"
    dest: "/tmp/calico.yaml"

- name: Install Calico network contoroller interface
#  when: calico_installed| failed
  command: "kubectl apply --kubeconfig=/etc/kubernetes/admin.conf -f /tmp/calico.yaml"
  run_once: true

- name: Copy kube admin conf to home dir
  fetch:
    src: "{{ kubeadm_config }}"
    dest: "{{ config_dest }}/admin.conf"
    flat: yes
  run_once: true
  ignore_errors: true
  
- name: Create Kubernetes config directory
  file:
    path: "~/.kube/"
    state: directory
    mode:  0755
  
- name: Copy kube admin conf to root dir
  fetch:
    src: "{{ kubeadm_config }}"
    dest: "~/.kube/config"
    flat: yes
  run_once: true
  ignore_errors: true  

- name: Awaiting all PODs to start
  shell:
    cmd: |
      echo "Get total PODs and wait until all of them are in Running state to move forward"
      TOT=`kubectl get pods --all-namespaces|awk '{print $4}'|wc -l`
      COUNT_RUNNING=`kubectl get pods --all-namespaces|awk '{print $4}'|grep Running|wc -l`
      echo "Total PODs: $TOT"
      echo "Total running pods: $COUNT_RUNNING"
      let DIFF="$(($TOT)) - $(($COUNT_RUNNING))"
      sleep 40
      while [  $(($DIFF)) -gt 1 ]; do
        sleep 20
        TOT=`kubectl get pods --all-namespaces|awk '{print $4}'|wc -l`
        COUNT_RUNNING=`kubectl get pods --all-namespaces|awk '{print $4}'|grep Running|wc -l`
        let DIFF="$(($TOT)) - $(($COUNT_RUNNING))"
        echo "Total PODs : $COUNT_RUNNING"
        echo "Pending to initiate: $DIFF"
      done
      echo "All PODs are running"
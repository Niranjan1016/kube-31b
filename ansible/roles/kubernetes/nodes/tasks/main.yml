---

- name: Add kubernetes APT GNG key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Add Kubernetes APT repository
  apt_repository:
    repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
    state: present

- name: install kubelet
  apt:
    name: kubelet=1.25.0-00
    state: present
    update_cache: true  

- name: install kubeadm
  apt:
    name: kubeadm=1.25.0-00
    state: present
    update_cache: true  

- name: install kubectl
  apt:
    name: kubectl=1.25.0-00
    state: present
    update_cache: true
    dpkg_options: force-downgrade 

- name: install kubernetes-cni
  apt:
    name: kubernetes-cni
    state: present
    update_cache: true

- name: Disable system swap
  shell: "swapoff -a"

- name: Remove current swaps from fstab
  lineinfile:
    dest: /etc/fstab
    regexp: '(?i)^([^#][\S]+\s+(none|swap)\s+swap.*)'
    line: '# \1'
    backrefs: yes
    state: present

- name: Disable swappiness and pass bridged IPv4 traffic to iptable's chains
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - { name: 'vm.swappiness', value: '0' }
    - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
    - { name: 'net.bridge.bridge-nf-call-ip6tables', value: "1"}

- name: Create kubelet service drop-in directory
  file:
    path: /etc/systemd/system/kubelet.service.d/
    state: directory
    owner: "{{ ansible_user | default(ansible_user_id) }}"
    group: "{{ ansible_user | default(ansible_user_id) }}"
    mode:  0755
  register: kubelet_service_dir  

#- name: Drop kubelet conf in drop-in directory
#  when: kubelet_service_dir| success
#  template: 
#    src: "../templates/20-kubeadm.conf.j2"
#    dest: "/etc/systemd/system/kubelet.service.d/20-extra-args.conf"
#  register: kubelet_conf


- name: Reset Kubernetes component
  shell: "kubeadm reset --force --cri-socket=/run/cri-dockerd.sock"
  register: reset_cluster

- name: Copy kubeadm config to tmp directory
  when: reset_cluster| success
  template: 
    src: "../templates/kubeadm-config.yml.j2"
    dest: "/tmp/kubeadm.yaml"
  register: kubeadm_config_copied

- name: Initial kubedam using config
  when: kubeadm_config_copied| success
  shell: "kubeadm join --config /tmp/kubeadm.yaml"
  register: kubeadm_join

- name: Reload kubelet daemon
  command: systemctl daemon-reload


